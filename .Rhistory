z <- rpois(100, 2)
par(mfrow=c(2,1))
plot(x, y, pch=20)
plot(x, y, pch=20)
par(mfrow=c(2,1))
plot(x, y, pch=20)
plot(x, y, pch=20)
plot(x, z, pch=19)
par(mfrow=c(2,1))
plot(x,y)
plot(x,y,pch=20)
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow=c(1,2))
par(mar=c(2, 2, 1, 1))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mar = c(4, 4, 2, 2))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow=c(1,1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50)
g <- gl(2, 50, labels = c("Male", "Female"))
g
plot(x, y)
plot(x, y, type="n")
points(x[g=="Male"], y[g=="Male"], col="green")
points(x[g=="Female"], y[g=="Female"], col="blue")
points(x[g=="Female"], y[g=="Female"], col="blue", pch=19)
data(faithful)
pdf(file="testplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.off()
x
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam)
set.seed(3435)
trainIndicator <- rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator==1,]
testSpam <- spam[trainIndicator==0,]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve, trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4] + 1 ))
?hclust
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
?dist
?t
hClusterUpdated <- hclust(dist(t(log10(trainSpam[,1:57]))))
hClusterUpdated <- hclust(dist(t(log10(trainSpam[,1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType <- as.numeric(trainSpam$type) - 1
costFunction <- function(x,y) sum(x != (y > 0.5))
cvError <- rep(NA, 55)
for(i in 1:55) {lmFormula <- reformulate(names(trainSpam)[i], response = "numType"); glmFit = glm(lmFormula, family = "binomial", data=trainSpam); cvError[i] <- cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]}
for(i in 1:55) {lmFormula <- reformulate(names(trainSpam)[i], response = "numType"); glmFit = glm(lmFormula, family = "binomial", data=trainSpam); cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]}
predictionModel <- glm(numType ~ charDollar, family="binomial", data=trainSpam)
predictionTest <- predict(predictionModel, testSpam)
predictedSpam <- rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] <- "spam"
predictedSpam
table(predictedSpam, testSpam$type)
?pbeta
install.packages("manipulate")
galton
library(datasets)
data(galton)
library(manipulate)
galton
data(galton)
install.packages("Galton")
install.packages("galton")
install.packages("HistData")
library(HistData)
galton
data(galton)
data(Galton)
galton<-Galton
galton
head(galton)
myHist <- function(mu) {
hist(galton$child,col="blue", breaks=100)
lines(c(mu, mu), c(0,150),col="red",lwd=5)
mse <- mean((galton$child-mu)^2)
text(63,150,paste("mu = ", mu))
text(63,140,paste("Imbalance = ", round(mse,2)))
}
manipulate(myHist(mu), mu=slider(62,74,step=0.5))
mean(galton$child)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y,pch=19, cex=2)
plot(x,y,pch=19, cex=2, col="blue")
text(x+0.05, y+0.05, lables=as.character(1:12))
df <- data.frame(x=x, y=y)
text(x+0.05, y+0.05, labels=as.character(1:12))
df <- data.frame(x=x, y=y)
df
test <- kmeans(df, centers=3)
test
names(test)
test$centers
test$iter
test$tot.withinss
test$size
par(mar=rep(0.2, 4))
plot(x,y, col=test$cluster, pch=19, cex=2)
?cex
?plot
points(test$centers, col=1:3, pch=3, cex=3)
points(test$centers, col=1:3, pch=3, cex=3, lwd=3)
test2 <- as.matrix(df)[sample(1:12),]
test2
test3 <- kmeans(test2, centers=3)
par(mfrow=c(1, 2), mar=c(2, 4, 0.1, 0.1))
image(t(test2)[,nrow(test2):1],yaxt="n")
image(t(test2)[,order(test$cluster)],yaxt="n")
?t
set.seed(12345)
par(mar=rep(0.2, 4))
dm <- matrix(rnorm(400), nrow=40)
image(1:10, 1:40, t(dm)[,nrow(dm):1])
heatmap(dm)
set.seed(678910)
for(i in 1:40){coinflip <- rbinom(1, size=1, prob=0.5); if(coinflip) {dm[i,] <- dm[i,] + rep(c(0,3), each=5)}}
image(1:10, 1:40, t(dm)[,nrow(dm):1])
heatmap(dm)
hh <- hclust(dist(dm))
hh
dmo <- dm[hh$order,]
head(dmo)
par(mfrow(c(1,3)))
par(mfrow=c(1,3))
image(t(dmo)[,nrow(dmo):1])
plot(rowMeans(dmo), 40:1, , xlab="row mean", ylab="row", pch=19)
plot(colMeans(dmo), xlab="col mean", ylab="col", pch=19)
svd1 <- svd(scale(dmo))
head(svd1)
image(t(dmo)[,nrow(dmo):1])
plot(svd1$u[,1], 40:1, , xlab="row", ylab="first left singular vector", pch=19)
plot(svd1$v[,1], xlab="column", ylab="first right singular vector", pch=19)
set.seed(678910)
for(i in 1:40){coinflip1 <- rbinom(1, size=1, prob=0.5); coinflip2 <- rbinom(1, size=1, prob=0.5); if(coinflip1) {dm[i,] <- dm[i,] + rep(c(0,5), each=5)}; if(coinflip2){dm[i,] <- dm[i,] + rep(c(0,5), 5)}}
hh <- hclust(dist(dm))
dmo <- dm[hh$order,]
svd2 <- svd(scale(dmo))
image(t(dmo)[,nrow(dmo):1])
plot(rep(c(0,1), each=5), pch=19, xlab="column", ylab="pattern 1")
plot(rep(c(0,1), 5), pch=19, xlab="column", ylab="pattern 2")
install.packages("impute")
load("data/face.rda")
?heat.colors
data(volcano)
heat.colors(volcano)
plot(heat.colors(volcano))
head(volcano)
plot(volcano)
dim(volcano)
plot(volcano[1:nrow(volcano),], volcano[,1:ncol(volcano)])
colors()
?gray
gray(21)
gray(.21)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(0.25)
pal2 <- colorRamp(c("red", "green", "blue"))
pal2(0)
pal2(.5)
pal2(0.6)
pal(seq(1:10))
pal(seq(0:1, length=10))
pal(seq(0:1, steps=10))
pal(seq(0, 1, 10))
pal(seq(0:1, len-10))
pal(seq(0:1, len=10))
pal(seq(0, 1, len=10))
?seq
?seq.along
?seq_along
seq_along(0,1)
seq_along(10)
seq_along(10-)
seq_along(100)
seq_along(c(1, 2, 3, 4, 5))
seq_along(c(1, 2, 3, 4, 5, 109, 120000))
pal2 <- colorRampPalette(c("red", "yellow", "green"))
pal2
pal2(1)
pal2(2)
pal2(3)
pal2(6)
install.packages("RColorBrewer")
library(RColorBrewer)
?YlOrRd
?image
image(volcano)
?image
image(volcano, topo.colors)
image(volcano, col=topo.colors)
image(volcano, col=topo.colors())
image(volcano, col="topo.colors"
)
?image
topo.colors()
?topo.colors
?image
image(volcano, col=topo.colors(10))
image(volcano, col=topo.colors(20))
image(volcano, col=topo.colors(100))
mycols <- brewer.pal(5, "BuGn")
mycols
image(volcano, col=mycols)
mypal <- colorRampPalette(mycols)
mypal
image(volcano, mypal(10))
image(volcano, col=mypal(10))
image(volcano, col=mypal(20))
?brewer.pal
display.brewer.all()
image(volcano, col=rainbow(20))
image(volcano, col=mypal(20))
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x,y)
?smoothscatter
?smoothScatter
smoothScatter(x,y, colramp=colorRampPalette(c, "white", "red"))
smoothScatter(x,y, colramp=colorRampPalette(c("white", "red"))
)
smoothScatter(x,y, colramp=colorRampPalette(c("white", "BuGn")))
smoothScatter(x,y, colramp=colorRampPalette(c("white", "steelblue")))
?rbg
?rgb
install.packages("colorspace")
?colorspace
??colorspace
plot(x, y, col=rgb(0,0,0, 0.1))
plot(x, y, col=rgb(0,0,0, 0.1), pch = 19)
setwd("C:/Users/570815/Dropbox/Coursera/R Working Directory")
epa09 <- read.table("./data/RD_501_88101_2009/RD_501_88101_2009-0.txt")
head(epa09)
epa09 <- read.table("./data/RD_501_88101_2009/RD_501_88101_2009-0.txt", sep="|")
head(epa09)
tail(epa09)
grep ^RC RD_501_88101_2009-0.txt
?grep
grep(^RC, epa09$V1)
grep("^RC", epa09$V1)
grep("^RD", epa09$V1)
grep("^RC", epa09$V1)
epa12 <- read.table("./data/RD_501_88101_2012/RD_501_88101_2012-0.txt", sep="\")
epa12 <- read.table("./data/RD_501_88101_2012/RD_501_88101_2012-0.txt", sep="|")
rm(epa09)
epa99 <- read.table("./data/RD_501_88101_1999/RD_501_88101_1999-0.txt", comment.char="#", header=FALSE, sep="|", na.strings="")
dim(epa99)
cnames1 <- readLines("./data/RD_501_88101_1999/RD_501_88101_1999-0.txt", 1)
cnames1
cnames1 <- str.split(cnames, "|", fixed=TRUE)
cnames1 <- strsplit(cnames, "|", fixed=TRUE)
cnames1 <- strsplit(cnames1, "|", fixed=TRUE)
cnames1
cnames1[[1]]
cnames1[[1]][1]
cnames1[1][[1]]
cnames1[[1]][1] <- "RD"
cnames1
names(epa99) <- cnames1
head(epa99)
names(epa99) <- cnames1[[1]]
head(epa99)
?make.names
names(epa99) <- make.names(cnames1[[1]])
head
(epa99)
head(epa99)
x0 <- epa99$Sample.Value
class(x0)
str(x0)
summary(x0)
mean(is.na(x0))
epa12 <- read.table("./data/RD_501_88101_2012/RD_501_88101_2012-0.txt", comment.char="#", header=FALSE, sep="|", na.strings="")
dim(epa12)
head(epa12)
nrow(epa12)
tail(epa12)
rm(epa12)
epa12 <- read.table("./data/RD_501_88101_2012/RD_501_88101_2012-0.txt", comment.char="#", header=FALSE, sep="|", na.strings="")
dim(epa12)
names(epa12) <- make.names(cnames1[[1]])
head(epa12)
mean(is.na(epa12$Sample.Value))
x1 <- epa12$Sample.Value
str(x1)
summary(x1)
summary(x0)
boxplot(x0, x1)
library(ggplot2)
?bwplot
library(lattice)
?bwplot
boxplot(log10(x0), log10(x1))
summary(x1)
negative <- x1 < 0
str(negative)
sum(negative, na.rm=TRUE)
mean(negative, na.rm=T)
dates <- epa12$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
str(dates)
hist(dates, "month")
hist(dates[negative], "month")
site99 <- unique(subset(epa99, State.Code==36, c(County.Code, Site.ID)))
site12 <- unique(subset(epa12, State.Code==36, c(County.Code, Site.ID)))
head(site99)
site99 <- paste(site99[,1], site99[,2], sep=".")
site12 <- paste(site12[,1], site12[,2], sep=".")
head(site99)
head(site12)
str(site99)
str(site12)
both <- intersect(site99, site12)
both
epa99$county.site <- with(epa99, paste(County.Code, Site.ID, sep="."))
epa12$county.site <- with(epa12, paste(County.Code, Site.ID, sep="."))
cnt99 <- subset(epa99, State.Code==36 & county.site %in% both)
cnt12 <- subset(epa12, State.Code==36 & county.site %in% both)
head(cnt99)
sapply(split(cnt99, cnt99$county.site), nrow)
sapply(split(cnt12, cnt12$county.site), nrow)
epa99sub <- subset(epa99, State.Code==36 & County.Code==63 & Site.ID==2008)
epa12sub <- subset(epa12, State.Code==36 & County.Code==63 & Site.ID==2008)
dim(epa99sub)
sim(epa12sub)
dim(epa12sub)
dates12 <- as.Date(as.character(epa12sub$Date))
dates12 <- as.Date(as.character(epa12sub$Date), "%Y%m%d")
pm12 <- epa12sub$Sample.Value
plot(dates12, pm12)
dates99 <- as.Date(as.character(epa99sub$Date), "%Y%m%d")
pm99 <- epa99sub$Sample.Value
plot(dates99, pm99)
par(mfrow=c(1,2))
par(mar=c(4,4,2,1))
plot(dates99, pm99, pch=20)
abline(h=median(pm99, na.rm=T))
plot(dates12, pm12)
abline(h=median(pm12, na.rm=T))
range(pm99, pm12, na.rm=T)
rng <- range(pm99, pm12, na.rm=T)
plot(dates99, pm99, pch=20, ylim=rng)
abline(h=median(pm99), na.rm=T)
abline(h=median(pm99, na.rm=T))
plot(dates12, pm12, pch=20, ylim=rng)
abline(h=median(pm12, na.rm=T))
mn99 <- with(epa99, tapply(Sample.Value, State.Code, mean, na.rm=T))
mn99
summary(mn99)
str(mn99)
mn12 <- with(epa12, tapply(Sample.Value, State.Code, mean, na.rm=T))
summary(mn12)
d99 <- data.frame(state=names(mn99), mean= mn99)
d12 <- data.frame(state=names(mn12), mean= mn12)
head(d99)
head(d12)
mrg <- merge(d99, d12, by="state")
head(mrg)
par(mfrow=c(1,1))
with(mrg, plot(rep(1999, 52), mrg[,2], xlim=c(1998, 2013))
)
tail(mrg)
with(mrg, plot(rep(1999, 53), mrg[,2], xlim=c(1998, 2013)))
with(mrg, points(rep(2012, 53), mrg[,3]))
?segments
segments(rep(1999, 53), mrg[,2], rep(2012, 53), mrg[,3])
pwd
getwd()
setwd("C:/Users/570815/Dropbox/Coursera/R Working Directory/ExData_Plotting2")
zipURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
#Windows:
download.file(zipURL, destfile="./data/NEIdata.zip")
#Mac:
download.file(zipURL, destfile="./data/NEIdata.zip", method="curl")
dateDownloaded <- date()
## download the data
if(!file.exists("./data")) {dir.create("./data")}
zipURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
#Windows:
download.file(zipURL, destfile="./data/NEIdata.zip")
#Mac:
download.file(zipURL, destfile="./data/NEIdata.zip", method="curl")
dateDownloaded <- date()
## unzip
unzip("./data/NEIdata.zip", exdir="./data")
nei <- readRDS("./data/summarySCC_PM25.rds")
scc <- readRDS("./data/Source_Classification_Code.rds")
head(nei)
str(nei)
?Date
head(scc)
nrow(scc)
str(nei)
str(nei$yera)
str(nei$year)
levels(as.factor(nei$year))
str(scc)
?readRDS
?aggregate
test <- aggregate(nei, by=nei$year, FUN=sum)
test <- aggregate(nei, by=list(Year =nei$year), FUN=sum)
test <- aggregate(nei$Emissions, by=list(Year =nei$year), FUN=sum)
head(test)
dim(test)
plot(test$Year, test$x)
?lm
?lmfit
?lm_fit
?lm.fit
abline(lm.fit(test$Year, test$x))
abline(lm.fit(test))
abline(lm(test$Year ~ test$x))
plot(lm(test$Year ~ test$x))
?plot
plot(test$Year, test$x, type="h")
plot(test$Year, test$x, type="h", lwd=10)
plot(test$Year, test$x, pch=20)
plot(test$Year, test$x, pch=19)
plot(test$Year, test$x, pch=19, main="Total Emissions per Year")
plot(test$Year, test$x, pch=19, main="Total Emissions per Year", xlab="Year", ylab="Total Emissions")
lines(lm(test$Year, test$x))
abline(lm(test$Year, test$x))
abline(lm(test$Year ~ test$x))
abline(lm(test$x ~ test$Year))
text(x+0.05, y+0.05, labels=levels(as.factor(nei$year)))
text(x+0.05, y+0.05, labels=as.character(levels(as.factor(nei$year))))
text(x+0.05, y+0.05, labels=c("1998", "2002", "2005", "2008"))
text(x+0.05, y+0.05, labels=as.character(c("1998", "2002", "2005", "2008")))
totals <- test
plot(totals$Year, totals$x, pch=19, main="Total Emissions per Year", xlab="Year",
ylab="Total Emissions")
abline(lm(totals$x ~ totals$Year))
text(totals$Year + 0.05, totals$x + 0.05, labels=c("1998", "2002", "2005", "2008"))
text(totals$Year + 0.5, totals$x, labels=c("1998", "2002", "2005", "2008"))
plot(totals$Year, totals$x, pch=19, main="Total Emissions per Year", xlab="Year",
ylab="Total Emissions")
abline(lm(totals$x ~ totals$Year))
text(totals$Year + 0.5, totals$x, labels=c("1998", "2002", "2005", "2008"))
plot(totals$Year, totals$x, pch=19, main="Total Emissions per Year", xlab="Year",
ylab="Total Emissions", xlim=(1998, 2010))
abline(lm(totals$x ~ totals$Year))
text(totals$Year + 0.5, totals$x, labels=c("1999", "2002", "2005", "2008"))
?xlim
plot(totals$Year, totals$x, pch=19, main="Total Emissions per Year", xlab="Year",
ylab="Total Emissions", xlim=("1998", "2010"))
abline(lm(totals$x ~ totals$Year))
text(totals$Year + 0.5, totals$x, labels=c("1999", "2002", "2005", "2008"))
plot(totals$Year, totals$x, pch=19, main="Total Emissions per Year", xlab="Year",
ylab="Total Emissions", xlim=c(1998, 2010))
abline(lm(totals$x ~ totals$Year))
text(totals$Year + 0.5, totals$x, labels=c("1999", "2002", "2005", "2008"))
## get totals by year
totals <- <- aggregate(nei$Emissions, by=list(Year =nei$year), FUN=sum)
## open graphics device
png(file = "plot1.png", width = 480, height = 480, units = "px")
## plot
plot(totals$Year, totals$x, pch=19, main="Total Emissions per Year", xlab="Year",
ylab="Total Emissions", xlim=c(1998, 2010))
abline(lm(totals$x ~ totals$Year))
text(totals$Year + 0.5, totals$x, labels=c("1999", "2002", "2005", "2008"))
## close graphics device
dev.off()
## get totals by year
totals <- aggregate(nei$Emissions, by=list(Year =nei$year), FUN=sum)
## open graphics device
png(file = "plot1.png", width = 480, height = 480, units = "px")
## plot
plot(totals$Year, totals$x, pch=19, main="Total Emissions per Year", xlab="Year",
ylab="Total Emissions", xlim=c(1998, 2010))
abline(lm(totals$x ~ totals$Year))
text(totals$Year + 0.5, totals$x, labels=c("1999", "2002", "2005", "2008"))
## close graphics device
dev.off()
rm(totals)
## get totals by year
totals <- aggregate(nei$Emissions, by=list(Year =nei$year), FUN=sum)
## open graphics device
png(file = "plot1.png", width = 480, height = 480, units = "px")
## plot
plot(totals$Year, totals$x, pch=19, main="Total Emissions per Year", xlab="Year",
ylab="Total Emissions", xlim=c(1998, 2010))
abline(lm(totals$x ~ totals$Year))
text(totals$Year + 0.5, totals$x, labels=c("1999", "2002", "2005", "2008"))
## close graphics device
dev.off()
rm(list=ls())
